#!/usr/bin/env bash

set -euo pipefail

# Define color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Helper function for logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

# Helper function for error logging
error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}" >&2
}

# Helper function for warnings
warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

# Function to check and install dependencies
check_dependencies() {
    
    # LOGIC HERE
    log "All dependencies are installed."
}

setup_port_forwarding() {
    local service_name=$1
    local local_port=$2
    local remote_port=$3
    local namespace=$4

    log "Setting up port forwarding for $service_name from local port $local_port to remote port $remote_port..."
    kubectl port-forward -n "$namespace" svc/"$service_name" "$local_port":"$remote_port" &> /tmp/port-forwarding.log &
    local pf_pid=$!
    sleep 2  # Give it a moment to establish or fail

    if ! ps -p $pf_pid > /dev/null; then
        error "Failed to set up port forwarding. Check /tmp/port-forwarding.log for details."
        return 1
    else
        log "Port forwarding set up successfully. PID: $pf_pid"
        echo "You can now access your service at http://localhost:$local_port"
        return 0
    fi
}

check_postgres_logs() {
    local namespace=$1
    log "Checking PostgreSQL logs..."
    kubectl logs -n "$namespace" -l app=postgres --tail=50
}
# MAIN FUNCTIONS

# Function to set up the development environment
setup() {
    log "Setting up development environment..."
    
    # Check if GITHUB_USER is provided
    if [ -z "${1:-}" ]; then
        error "GITHUB_USER is required for setup. Usage: ./run setup <GITHUB_USER> [OPTIONS]"
        exit 1
    fi
    
    # Set a user-writable log file location
    export K3S_INSTALL_LOG_FILE="$HOME/k3s_install.log"
    
    # Run the install-setup.sh script with error handling
    if ! ./scripts/install-setup.sh "$@"; then
        error "Setup failed. Check the log file at $K3S_INSTALL_LOG_FILE for details."
        exit 1
    fi
    
    log "Development environment setup complete."
}

dev() {
    log "Starting development environment..."
    check_dependencies

    # Check if K3s is running and attempt recovery if not
    if ! systemctl is-active --quiet k3s; then
        warn "K3s is not active. Attempting to start it..."
        sudo systemctl restart k3s
        # Wait a brief moment for the service to restart
        sleep 5
        if systemctl is-active --quiet k3s; then
            log "K3s recovered successfully."
        else
            error "Failed to recover K3s. Please check the system logs."
            exit 1
        fi
    fi

    # Check if kubeconfig file exists and is readable
    if [ ! -r "/etc/rancher/k3s/k3s.yaml" ]; then
        error "Cannot read K3s kubeconfig file. Please ensure K3s is installed and you have the necessary permissions."
        log "Try running: sudo chmod 644 /etc/rancher/k3s/k3s.yaml"
        log "Or: export KUBECONFIG=\$HOME/.kube/config"
        exit 1
    fi

    # Set KUBECONFIG environment variable
    export KUBECONFIG="/etc/rancher/k3s/k3s.yaml"

    # Check if necessary files exist
    for file in kustomization.yaml kubernetes/base/namespace.yaml kubernetes/base/deployment.yaml kubernetes/base/ingress.yaml; do
        if [ ! -f "$file" ]; then
            error "File $file not found. Please make sure all required files are present."
            exit 1
        fi
    done

    # Apply kustomization
    if kubectl apply -k .; then
        log "Kustomization applied successfully."
    else
        error "Failed to apply kustomization. Check your Kubernetes manifests."
        exit 1
    fi

    # Check pod status
    log "Checking pod status..."
    kubectl get pods -n personal-site

    # Check events in the namespace
    log "Checking events in the personal-site namespace..."
    kubectl get events -n personal-site

    # Check pod logs if they exist but are not ready
    log "Checking pod logs..."
    kubectl logs -n personal-site -l app=personal-site --tail=50

    # Describe the deployment
    log "Describing deployment..."
    kubectl describe deployment -n personal-site

    # Check services
    log "Checking services..."
    kubectl get services -n personal-site

    # Wait for pods to be ready
    log "Waiting for pods to be ready..."
    if ! kubectl wait --for=condition=ready pod -l app=personal-site -n personal-site --timeout=120s; then
        error "Pods did not become ready within the timeout period. Check your pod status."
        kubectl describe pods -n personal-site
        exit 1
    fi

    local HTTP_PORT=$(kubectl get configmap personal-site-config -n personal-site -o=jsonpath='{.data.http-port}')

    # Port forward to make the service accessible
    log "Setting up port forwarding..."
    if ! setup_port_forwarding "personal-site-green" 8000 "$HTTP_PORT" "personal-site"; then
        exit 1
    fi

    log "Development environment started. You can now access your services at http://localhost:8000"
}

# Function to run tests
lint() {
    log "Linting Kubernetes files and shell scripts..."
    
    # Run Kubeconform lints
    if ./scripts/lint-and-validate.sh; then
        log "All Kubeconform lints passed successfully."
    else
        error "Some Kubeconform lints failed. Please review the output above."
        return 1
    fi

    log "All linting completed successfully."
}

# Function to deploy
deploy() {
    local env=${1:-local}
    log "Deploying to $env environment..."
    
    # LOGIC HERE
    
    log "Deployment to $env completed."
}

# Function to implement canary deployment
canary() {
    local percentage=${1:-10}
    log "Implementing canary deployment with $percentage% traffic..."
    ./scripts/canary-deploy.sh "$percentage"
    log "Canary deployment completed. Monitor closely and use './run switch' to fully switch or rollback."
}

# Function to switch deployment
switch() {
    log "Switching deployment..."
    ./scripts/switch-deployment.sh
    log "Deployment switched."
}

# Function to display logs and metrics
monitor() {
    log "Displaying logs and metrics..."
    kubectl get pods -A
    kubectl top nodes
    kubectl top pods -A
    log "Use 'kubectl logs <pod-name>' for specific pod logs."
}

# Function to clean up resources
cleanup() {
    log "Cleaning up resources..."
    sudo systemctl stop k3s
    sudo /usr/local/bin/k3s-uninstall.sh
    rm -f kubeconfig.yaml
    log "Cleanup completed."
}

stop() {
    log "Stopping k3s..."
    if ./scripts/stop-k3s.sh; then
        log "k3s stopped successfully."
    else
        error "Failed to stop k3s. Check the logs for more information."
        exit 1
    fi
}

# Help function
show_help() {
    echo "Usage: ./run [command]"
    echo "Commands:"
    echo "  setup         - Set up the development environment"
    echo "  dev           - Start the development environment"
    echo "  stop          - Stop the k3s service"
    echo "  lint          - Lint Kubernetes files and shells cripts."
    echo "  deploy [env]  - Deploy to specified environment (local, staging, production)"
    echo "  canary [%]    - Implement canary deployment with specified percentage"
    echo "  switch        - Switch deployment (use after canary)"
    echo "  monitor       - Display logs and metrics"
    echo "  cleanup       - Remove all created resources"
    echo "  help          - Show this help message"
}


# Main script execution
case "${1:-help}" in
    setup)
        if [ -z "${2:-}" ]; then
            error "GITHUB_USER is required for setup. Usage: ./run setup <GITHUB_USER> [OPTIONS]"
            exit 1
        fi
        setup "${@:2}"  # Pass all arguments except 'setup' to the setup function
        ;;
    dev)
        dev
        ;;
    stop)
        stop
        ;;
    lint)
        lint
        ;;
    deploy)
        deploy "${2:-local}"
        ;;
    canary)
        canary "${2:-10}"
        ;;
    switch)
        switch
        ;;
    monitor)
        monitor
        ;;
    cleanup)
        cleanup
        ;;
    help)
        show_help
        ;;
    *)
        error "Invalid command. Use './run help' for usage information."
        exit 1
        ;;
esac
