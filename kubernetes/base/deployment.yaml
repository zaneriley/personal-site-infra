apiVersion: apps/v1
kind: Deployment
metadata:
  name: personal-site-blue
  namespace: personal-site
  annotations:
    kube-score/ignore: pod-probes
spec:
  replicas: 2
  selector:
    matchLabels:
      app: personal-site
      version: blue
  template:
    metadata:
      labels:
        app: personal-site
        version: blue
    spec:
      containers:
      - name: personal-site
        image: nginx:alpine
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        command: ["/bin/sh", "-c"]
        args: ["echo 'Blue Version' > /usr/share/nginx/html/index.html && nginx -g 'daemon off;'"]
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
            ephemeral-storage: 512Mi  # Add ephemeral storage limit
          limits:
            cpu: 200m
            memory: 256Mi
            ephemeral-storage: 512Mi  # Add ephemeral storage limit
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:  # Add liveness probe
          httpGet:
            path: /health-check
            port: 8000
        securityContext:
          runAsNonRoot: true
          runAsGroup: 10010
          runAsUser: 10010
          readOnlyRootFilesystem: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - personal-site
              topologyKey: "kubernetes.io/hostname"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: personal-site-green
  namespace: personal-site
  annotations:
    kube-score/ignore: pod-probes
spec:
  replicas: 2
  selector:
    matchLabels:
      app: personal-site
      version: green
  template:
    metadata:
      labels:
        app: personal-site
        version: green
    spec:
      containers:
      - name: personal-site
        image: nginx:alpine
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        command: ["/bin/sh", "-c"]
        args: ["echo 'green Version' > /usr/share/nginx/html/index.html && nginx -g 'daemon off;'"]
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
            ephemeral-storage: 256Mi  # Add ephemeral storage request
          limits:
            cpu: 200m
            memory: 256Mi
            ephemeral-storage: 512Mi  # Add ephemeral storage limit
        readinessProbe:
          httpGet:
            path: /health  # Adjust to your app's health check endpoint
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:  # Add liveness probe
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 10
        securityContext:
          runAsNonRoot: true
          runAsUser: 10010  # Use a UID > 10000
          runAsGroup: 10010  # Use a GID > 10000
          readOnlyRootFilesystem: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - personal-site
              topologyKey: "kubernetes.io/hostname"
---
apiVersion: v1
kind: Service
metadata:
  name: personal-site-blue
  namespace: personal-site
spec:
  selector:
    app: personal-site
    version: blue 
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: personal-site-green
  namespace: personal-site
spec:
  selector:
    app: personal-site
    version: green
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: personal-site-pdb
  namespace: personal-site
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: personal-site
---
# Add NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: personal-site-network-policy
  namespace: personal-site
spec:
  podSelector:
    matchLabels:
      app: personal-site
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx  # Adjust based on your ingress namespace
    ports:
    - protocol: TCP
      port: 80
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.0/8
        - 172.16.0.0/12
        - 192.168.0.0/16
    ports:
    - protocol: TCP
      port: 443  # Allow HTTPS egress
